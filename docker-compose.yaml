services:
  db:
    image: postgres:17-alpine
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-net
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      retries: 5
      start_period: 10s

  broker:
    image: rabbitmq:4.1-management
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    networks:
      - app-net
    ports:
      - "${RABBIT_MANAGEMENT_PORT}:15672"
      - "${RABBIT_PORT}:5672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: always
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@broker:${RABBIT_PORT}/
      - TREASURY_API_BASE_URL=${TREASURY_API_BASE_URL}
      - TREASURY_API_ENDPOINT=${TREASURY_API_ENDPOINT}
      - API_PORT=${API_PORT}
      - GIN_MODE=${GIN_MODE}
    networks:
      - app-net
    ports:
      - "${API_PORT}:8080"
    depends_on:
      broker:
        condition: service_healthy
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        API_URL: http://localhost:${API_PORT}
    restart: always
    networks:
      - app-net
    ports:
      - "${FLUTTER_PORT}:80"
    depends_on:
      - api

volumes:
  db_data:

networks:
  app-net: